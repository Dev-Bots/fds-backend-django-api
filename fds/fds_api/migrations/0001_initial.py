# Generated by Django 4.0.3 on 2022-04-16 17:20

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_active', models.BooleanField(default=True)),
                ('type', models.CharField(choices=[('PLAYER', 'Player'), ('SCOUT', 'Scout'), ('CLUB', 'Club'), ('ADMIN', 'Admin')], default='ADMIN', max_length=50, verbose_name='Type')),
                ('phone_number', models.CharField(max_length=255, verbose_name='Phone number')),
                ('email', models.EmailField(max_length=255, verbose_name='Email')),
                ('profile_picture', models.ImageField(blank=True, upload_to='assests/images/profile_pictures/', verbose_name='Profile picture')),
                ('address', models.CharField(max_length=255, verbose_name='Address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('starting_date', models.DateField(verbose_name='Event start date')),
                ('application_deadline', models.DateField(verbose_name='Application Deadline')),
                ('description', models.TextField(verbose_name='Description')),
                ('required_positions', models.CharField(choices=[('goalkeepers', 'Gk'), ('defenders', 'Def'), ('midfielders', 'Mid'), ('strikers', 'Str'), ('any', 'Any')], max_length=50, verbose_name='Required positions')),
                ('age_limit', models.IntegerField(verbose_name='Age limit')),
                ('education_level', models.CharField(max_length=200, verbose_name='Education level')),
                ('location', models.CharField(max_length=200, verbose_name='Education level')),
                ('gender', models.CharField(choices=[('MALE', 'Male'), ('FEMALE', 'Female')], max_length=50, verbose_name='Gender')),
                ('session_time_for_each', models.IntegerField(verbose_name='Session time')),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Skill name')),
                ('description', models.TextField(verbose_name='Skill Description')),
                ('weight_for_GK', models.IntegerField(choices=[(0, 'None'), (1, 'Very Low'), (2, 'Low'), (3, 'Moderate'), (4, 'High'), (5, 'Very High')], default=3, verbose_name='Level of importance for GKs')),
                ('weight_for_DEF', models.IntegerField(choices=[(0, 'None'), (1, 'Very Low'), (2, 'Low'), (3, 'Moderate'), (4, 'High'), (5, 'Very High')], default=3, verbose_name='Level of importance for DEFs')),
                ('weight_for_MID', models.IntegerField(choices=[(0, 'None'), (1, 'Very Low'), (2, 'Low'), (3, 'Moderate'), (4, 'High'), (5, 'Very High')], default=3, verbose_name='Level of importance for MIDs')),
                ('weight_for_STR', models.IntegerField(choices=[(0, 'None'), (1, 'Very Low'), (2, 'Low'), (3, 'Moderate'), (4, 'High'), (5, 'Very High')], default=3, verbose_name='Level of importance for GK')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerMore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('MALE', 'Male'), ('FEMALE', 'Female')], max_length=50, verbose_name='Gender')),
                ('dob', models.DateField(verbose_name='Date of birth')),
                ('overview', models.TextField(blank=True, verbose_name='Overview')),
                ('video', models.FileField(blank=True, upload_to='assets/video/', verbose_name='Video link')),
                ('birth_certificate', models.FileField(upload_to='assets/images/birth_certifcate/', verbose_name='Birth certificate')),
                ('education_level', models.CharField(max_length=255, verbose_name='Education level')),
                ('highest_education_evidence', models.FileField(upload_to='assets/images/education/', verbose_name='Education evidence')),
                ('foot', models.CharField(choices=[('RIGHT', 'Right'), ('LEFT', 'Left'), ('BOTH', 'Both')], default='RIGHT', max_length=50, verbose_name='Preffered foot')),
                ('weight', models.FloatField(verbose_name='Weight')),
                ('height', models.FloatField(verbose_name='Height')),
                ('playing_possition1', models.CharField(choices=[('GK', 'Gk'), ('DEF/CB', 'Cb'), ('DEF/RB', 'Rb'), ('DEF/LB', 'Lb'), ('MID/CM', 'Cm'), ('MID/LM', 'Lm'), ('MID/RM', 'Rm'), ('MID/CAM', 'Cam'), ('MID/CDM', 'Cdm'), ('STR/CF', 'Cf'), ('STR/LW', 'Lw'), ('STR/RW', 'Rw')], max_length=50, verbose_name='Playing possition 1')),
                ('playing_possition2', models.CharField(choices=[('GK', 'Gk'), ('DEF/CB', 'Cb'), ('DEF/RB', 'Rb'), ('DEF/LB', 'Lb'), ('MID/CM', 'Cm'), ('MID/LM', 'Lm'), ('MID/RM', 'Rm'), ('MID/CAM', 'Cam'), ('MID/CDM', 'Cdm'), ('STR/CF', 'Cf'), ('STR/LW', 'Lw'), ('STR/RW', 'Rw')], max_length=50, verbose_name='Playing possition 2')),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Parameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='fds_api.event')),
                ('skills', models.ManyToManyField(blank=True, related_name='parameter', to='fds_api.skill')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('content', models.TextField(verbose_name='Notification content')),
                ('date', models.DateField(auto_now=True, verbose_name='Notified date')),
                ('to', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, related_name='notified_account', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ClubMore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('club_name', models.TextField(blank=True, verbose_name='Club name')),
                ('acronym', models.TextField(blank=True, verbose_name='Acronym')),
                ('organization_type', models.TextField(blank=True, verbose_name='Organization type')),
                ('website', models.TextField(blank=True, verbose_name='Website')),
                ('establishment_year', models.DateField(blank=True, max_length=255, verbose_name='Establishment year')),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('fds_api.account',),
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('fds_api.account',),
        ),
        migrations.CreateModel(
            name='Scout',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('fds_api.account',),
        ),
        migrations.AddField(
            model_name='skill',
            name='club',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fds_api.club'),
        ),
        migrations.CreateModel(
            name='ScoutMore',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('is_assigned', models.BooleanField(default=False, verbose_name='Is the Scout assigned')),
                ('gender', models.CharField(choices=[('MALE', 'Male'), ('FEMALE', 'Female')], max_length=50, verbose_name='Gender')),
                ('dob', models.DateField(verbose_name='Date of birth')),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scouts', to='fds_api.club')),
            ],
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.JSONField(verbose_name='score')),
                ('aggregate', models.FloatField(verbose_name='Aggregate')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_grades', to='fds_api.event')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='graded_players', to='fds_api.player')),
                ('scout', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='scouts_grade', to='fds_api.scout')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='accepted_applicants',
            field=models.ManyToManyField(blank=True, related_name='accepted_applicants', to='fds_api.player'),
        ),
        migrations.AddField(
            model_name='event',
            name='applicants',
            field=models.ManyToManyField(blank=True, related_name='applicants', to='fds_api.player'),
        ),
        migrations.AddField(
            model_name='event',
            name='candidates',
            field=models.ManyToManyField(blank=True, related_name='candidates', to='fds_api.player'),
        ),
        migrations.AddField(
            model_name='event',
            name='club',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='fds_api.club'),
        ),
        migrations.AddField(
            model_name='event',
            name='scouts',
            field=models.ManyToManyField(blank=True, related_name='assigned_scouts', to='fds_api.scout'),
        ),
    ]
